// Default pipeline params
params{
    input = "./data/*.tsv"
    outdir = "results"
    with_gpu = false
    mode = "HL"
    max_memory = 6.GB
    max_cpus = 6
    cell_id = "cell_id_unique"
    batch_size = 50
    skip_translation = false
}

includeConfig 'conf/base.config'

profiles {
    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }
    apptainer{
        apptainer.enabled = true
        docker.enabled = false
        apptainer.autoMounts = true
    }
    singularity{
        singularity.enabled = true
        docker.enabled = false
        singularity.autoMounts = true
    }

    mccleary{
        singularity.enabled = true
        singularity.autoMounts = true
        docker.enabled = false
        executor.name = 'slurm'
        executor.queueSize = 50
        executor.submitRateLimit='190/60min'
        params.max_memory = 983.GB
        params.max_cpus = 64
        process{
            executor = 'slurm'
            scratch = 'true'
            queue = { task.time > 24.h ? 'cpu3-long' : 'cpu1' }
            withLabel:gpus{
                queue = "gpu-a30"
                clusterOptions = "--gpus=1"
                containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
                ( workflow.containerEngine == "docker" ? '--gpus all': null ) }
                time = 6.h
            }
            withLabel:gpus_highmem{
                queue = "gpu-a30"
                clusterOptions = "--gpus=1"
                containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
                ( workflow.containerEngine == "docker" ? '--gpus all': null ) }
                memory = 32.GB
                time = 6.h
            }   
        }
    }

    m3c_gpu {
        params {
            config_profile_description = 'The M3 Research Center HPC cluster profile provided by nf-core/configs'
            config_profile_contact     = 'Sabrina Krakau (@skrakau)'
            config_profile_url         = 'https://www.medizin.uni-tuebingen.de/de/das-klinikum/einrichtungen/zentren/m3'
        }
        
        singularity {
            enabled = true
        }
        
        process {
            resourceLimits = [
                memory: 1843.GB,
                cpus: 128,
                time: 14.d
            ]
            executor         = 'slurm'
            queue            = { task.time > 23.h ? 'cpu3-long' : (task.memory > 460.GB || task.cpus > 64 ? 'cpu2-hm' : 'cpu1') }
            scratch          = 'true'
            containerOptions = '--bind $TMPDIR'
            withLabel:gpus{
                queue = "gpu-a30"
                clusterOptions = "--gpus=1"
                containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
                ( workflow.containerEngine == "docker" ? '--gpus all': null ) }
                time = 6.h
            }
            withLabel:gpus_highmem{
                queue = "gpu-a30"
                clusterOptions = "--gpus=1"
                containerOptions = { workflow.containerEngine == "singularity" ? '--nv':
                ( workflow.containerEngine == "docker" ? '--gpus all': null ) }
                memory = 32.GB
                time = 6.h
            }   
        }
        
        params {
            igenomes_base = '/mnt/lustre/datasets/igenomes'
            max_memory    = 1843.GB
            max_cpus      = 128
            max_time      = 14.d
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
